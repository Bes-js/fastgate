{"version":3,"sources":["../src/services/router.ts","../src/services/engine.ts","../src/index.ts"],"names":[],"mappings":"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","file":"index.mjs","sourcesContent":["import nyro from 'nyro';\n\nexport default class ProxyRouter {\n  constructor() { };\n\n  /**\n   * @param url URL to send the request to\n   * @param method HTTP method to use\n   * @returns Promise<any>\n   * @description Send a request to a URL\n   */\n  public static async send(url: string, method: \"GET\" | \"POST\" | \"PUT\" | \"DELETE\" | \"PATCH\" | \"HEAD\" | \"OPTIONS\" | \"CONNECT\" | \"TRACE\") {\n    return new Promise((resolve, reject) => {\n    nyro({\n        url: url,\n        method: method,\n        headers: {\n            'Content-Type': 'application/json',\n            'Accept': '*/*'\n        },\n        timeout: 10000\n    }).then((response) => {\n        resolve(response.body);\n    }).catch((error) => {\n        reject(error);\n    })\n  })\n }\n \n}","import ProxyRouter from \"./router\";\nimport { \n    ProxyAPIOptions,\n    ProxyAPIResponse,\n    ProxyFilterOptions,\n    ProxyFetchOptions,\n    OmitedProxyAPIResponse,\n    ProxyObject\n } from './types';\n\nvar cachedProxies: any[] = [];\nvar lastFetchTimestamp: number = 0;\n\nexport default class Engine {\n    constructor() {};\n\n    public static proxies: ProxyObject[] = cachedProxies;\n    \n    /**\n     * Get a list of proxies\n     * @param options Options for fetching the list\n     * @returns ProxyAPIResponse\n     * \n     * @example\n     * \n     * import fastgate from 'fastgate';\n     * \n     * fastgate.getProxyList({\n     *    country: ['US'],\n     *    protocol: ['http'],\n     *    anonymity: ['elite'],\n     *    timeout: 5000\n     * }).then((response) => {\n     *  console.log(response);\n     * })\n     * \n     */\n    public static async getProxyList(options?: ProxyAPIOptions): Promise<ProxyAPIResponse> {\n        if(!options) options = {};\n        if(!options.format) options.format = 'json';\n        if(!options.proxy_format) options.proxy_format = 'protocolipport';\n        if(!options.protocol) options.protocol = ['http', 'socks4', 'socks5'];\n\n        return new Promise((resolve, reject) => {\n         ProxyRouter.send(\n         `https://api.proxyscrape.com/v4/free-proxy-list/get?request=display_proxies${\n                options.country ? `&country=${options.country.join(',')}` : ''\n            }${\n                options.protocol ? `&protocol=${options.protocol.join(',')}` : ''\n            }${\n                options.proxy_format ? `&proxy_format=${options.proxy_format}` : ''\n            }${\n                options.format ? `&format=${options.format}` : ''\n            }${\n                options.anonymity ? `&anonymity=${options.anonymity.join(',')}` : ''\n            }${\n                options.timeout ? `&timeout=${options.timeout}` : ''\n            }`,\n         'GET'\n        ).then((response) => {\n            resolve(response as ProxyAPIResponse);\n        }).catch((error) => {\n            reject(error);\n        });\n    });\n   };\n\n   /**\n    * Get a proxy from the list\n    * @param fetchOptions Options for fetching the proxy\n    * @returns ProxyObject\n    * \n    * @example \n    * \n    * import fastgate from 'fastgate';\n    * \n    * fastgate.getProxy({\n    *    force: false,\n    *   proxyOptions: {\n    *      alive: true,\n    *     timeout: (timeout) => {\n    *      return timeout < 5000;\n    *    },\n    *     ip: (ip) => {\n    *        return ip.startsWith('190');\n    *    }\n    * }).then((response) => {\n    *  console.log(response);\n    * })\n    * \n    */\n   public static async getProxy(fetchOptions?: ProxyFetchOptions): Promise<ProxyObject|undefined> {\n\n    if(!fetchOptions) fetchOptions = {};\n    if(fetchOptions?.force) cachedProxies = [];\n    if(\n        fetchOptions?.reload &&\n        fetchOptions?.reloadTimeout &&\n        Date.now() - lastFetchTimestamp > fetchOptions?.reloadTimeout\n     ) {\n        cachedProxies = [];\n     }\n     \n     const filteredCatchProxy = (): ProxyObject | undefined => {\n        const findedProxy: ProxyObject | undefined = cachedProxies.find((proxy) => {\n         \n            if (fetchOptions?.proxyOptions?.alive && !proxy?.alive) return false;\n            if (fetchOptions?.proxyOptions?.timeout && !fetchOptions.proxyOptions.timeout(proxy.timeout)) return false;\n            if (fetchOptions?.proxyOptions?.anonymity && !fetchOptions.proxyOptions.anonymity.includes(proxy.anonymity)) return false;\n            if (fetchOptions?.proxyOptions?.protocol && !fetchOptions.proxyOptions.protocol.includes(proxy.protocol)) return false;\n            if (fetchOptions?.proxyOptions?.ssl !== undefined && proxy?.ssl !== fetchOptions.proxyOptions.ssl) return false;\n            if (fetchOptions?.proxyOptions?.ip && !fetchOptions.proxyOptions.ip(proxy.ip)) return false;\n            if (fetchOptions?.proxyOptions?.port && !fetchOptions.proxyOptions.port(proxy.port)) return false;\n    \n            return true;\n        });\n    \n        return findedProxy;\n    };\n\n     const catchProxy = (): ProxyObject => {\n        if(cachedProxies.length === 0) {\n            throw new Error('No proxies found');\n        };\n        var randomNumber = Math.floor(Math.random() * cachedProxies.length);\n        var proxy = cachedProxies[randomNumber];\n        if(fetchOptions?.removeProxy) cachedProxies.splice(randomNumber, 1);\n        return proxy;\n     };\n\n     if(cachedProxies.length === 0) {\n     cachedProxies = await new Promise((resolve, reject) => {\n        this.getProxyList().then((response) => {\n            lastFetchTimestamp = Date.now();\n            if(!response.proxies) {\n                reject('No proxies found');\n                return;\n            }\n\n            resolve(response.proxies);\n        }).catch((error) => {\n            reject(error);\n        });\n    });\n\n    if(fetchOptions.proxyOptions) {\n        return filteredCatchProxy();\n    } else {\n        return catchProxy();\n    }\n    } else {\n    if(fetchOptions.proxyOptions) {\n        return filteredCatchProxy();\n    } else {\n        return catchProxy();\n    }\n    }\n\n   };\n\n\n}","import ProxyManager from './services/engine';\nexport * from './services/types';\nexport default ProxyManager;"]}